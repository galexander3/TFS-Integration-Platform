<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlKeyPressed" xml:space="preserve">
    <value>Processing canceled by the user.</value>
  </data>
  <data name="InvalidCommand" xml:space="preserve">
    <value>TF61036: Unrecognized or incomplete command {0}</value>
  </data>
  <data name="InvalidSourceFieldMap" xml:space="preserve">
    <value>Source field '{0}' is mapped more than once in '{1}'</value>
  </data>
  <data name="InvalidTargetFieldMap" xml:space="preserve">
    <value>Target field '{0}' is mapped more than once in '{1}'</value>
  </data>
  <data name="MultipleSourceEntity" xml:space="preserve">
    <value>Source Entity '{0}' exists more than once in '{1}'</value>
  </data>
  <data name="MultipleTargetEntity" xml:space="preserve">
    <value>Target Work Item Type '{0}' exists more than once in '{1}'</value>
  </data>
  <data name="NoSchemaMap" xml:space="preserve">
    <value>No Schema Map defined in '{0}'</value>
  </data>
  <data name="NoUserMap" xml:space="preserve">
    <value>No User Map defined in '{0}'</value>
  </data>
  <data name="NullFromField" xml:space="preserve">
    <value>Null 'from' field specified in the map file '{0}'</value>
  </data>
  <data name="SchemaMapMandatory" xml:space="preserve">
    <value>TF61037: Missing Argument /s:&lt;schema map file&gt;. The Schema Map xml file parameter is required with the Migrate command.</value>
  </data>
  <data name="SchemaMapNotRequired" xml:space="preserve">
    <value>TF61038: Unsupported Argument /s:{0}. The Schema Map xml file parameter is not used with the Analyze command.</value>
  </data>
  <data name="CurConHelpMessage" xml:space="preserve">
    <value>{0} [/?|h|help | /m[igrationsettings:&lt;configuration file&gt;] 

 configration file  The generator configuration file. 
 /?|h|help          Display help

Example:
 &gt; {0}.exe /m:MyConfiguration.xml</value>
  </data>
  <data name="AnalyzeCommand" xml:space="preserve">
    <value>Command - Analyze</value>
  </data>
  <data name="MigrateCommand" xml:space="preserve">
    <value>Command - Migrate</value>
  </data>
  <data name="ConfigFile" xml:space="preserve">
    <value>Migration Settings file - {0}</value>
  </data>
  <data name="SchemaMapFile" xml:space="preserve">
    <value>Schema Map file - {0}</value>
  </data>
  <data name="Config" xml:space="preserve">
    <value>CONFIG</value>
  </data>
  <data name="AnalysisSuccessful" xml:space="preserve">
    <value>Analysis completed successfully</value>
  </data>
  <data name="AnalysisWithWarnings" xml:space="preserve">
    <value>Analysis completed with {0} warning(s)</value>
  </data>
  <data name="AnalysisWithErrors" xml:space="preserve">
    <value>Analysis completed with {0} warning(s), {1} error(s)</value>
  </data>
  <data name="AnalysisReportFile" xml:space="preserve">
    <value>Analysis report file: {0}</value>
  </data>
  <data name="MigrationSuccessful" xml:space="preserve">
    <value>Migration completed successfully</value>
  </data>
  <data name="MigrationWithWarnings" xml:space="preserve">
    <value>Migration completed with {0} warning(s)</value>
  </data>
  <data name="MigrationWithErrors" xml:space="preserve">
    <value>Migration completed with {0} warning(s), {1} error(s)</value>
  </data>
  <data name="MigrationReportFile" xml:space="preserve">
    <value>Migration report file: {0}</value>
  </data>
  <data name="OutputDirCreationFailed" xml:space="preserve">
    <value>TF61116: The converter could not create the output directory because of the following error: {0}. Correct the directory name in the configuration file '{1}' or check the file permissions and try again.</value>
  </data>
  <data name="InvalidSourceId" xml:space="preserve">
    <value>The source id {0} in configuration file {1} is invalid.</value>
  </data>
  <data name="InvalidAssemblyName" xml:space="preserve">
    <value>Invalid assembly name: {0}</value>
  </data>
  <data name="UnresolvedUsers" xml:space="preserve">
    <value>Unable to resolve following user names: {0}</value>
  </data>
  <data name="InvalidSchemaMap" xml:space="preserve">
    <value>TF61120: The file '{0}' is not a valid schema map file. Please check the format of the file in the help documentation.</value>
  </data>
  <data name="Analysis" xml:space="preserve">
    <value>analysis</value>
  </data>
  <data name="Migration" xml:space="preserve">
    <value>migration</value>
  </data>
</root>