<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FilesMatch" xml:space="preserve">
    <value>Files match. Source: {0} Target: {1}</value>
  </data>
  <data name="ItemContentDoesNotMatch" xml:space="preserve">
    <value>Item exists on both systems but content doesn't match: {0}</value>
  </data>
  <data name="ItemOnlyFoundOnSource" xml:space="preserve">
    <value>Item only exists on source system: {0}</value>
  </data>
  <data name="ItemOnlyFoundOnTarget" xml:space="preserve">
    <value>Item only exists on target system: {0}</value>
  </data>
  <data name="MigrationSourceName" xml:space="preserve">
    <value>Migration source system: {0}</value>
  </data>
  <data name="MigrationTargetName" xml:space="preserve">
    <value>Migration target system: {0}</value>
  </data>
  <data name="ProcessingSourceFolder" xml:space="preserve">
    <value>Processing source folder: {0}</value>
  </data>
  <data name="ProviderDoesNotImplementVCDiffInterface" xml:space="preserve">
    <value>The provider '{0}' does not implement the interface IVCServerDiffProvider so a diff operation cannot be performed.</value>
  </data>
  <data name="ProviderDoesNotImplementWITDiffInterface" xml:space="preserve">
    <value>The provider '{0}' does not implement the interface IWITDiffProvider so a diff operation cannot be performed.</value>
  </data>
  <data name="ProviderDoesNotImplementServerPathTranslationInterface" xml:space="preserve">
    <value>The provider '{0}' does not implement the interface IServerPathTranslationService so a diff operation cannot be performed.</value>
  </data>
  <data name="SessionGroupNotFound" xml:space="preserve">
    <value>No session group found with ID: {0}</value>
  </data>
  <data name="ServerDiffError" xml:space="preserve">
    <value>ServerDiff: ERROR: {0}</value>
  </data>
  <data name="ServerDiffInfo" xml:space="preserve">
    <value>ServerDiff: INFO: {0}</value>
  </data>
  <data name="VCServerDiffTimeToRun" xml:space="preserve">
    <value>VCServerDiff.VerifyContentMatch time to perform diff: {0} seconds</value>
  </data>
  <data name="SessionWithTypeNotFound" xml:space="preserve">
    <value>No session of type {0} was found</value>
  </data>
  <data name="WITServerDiffTimeToRun" xml:space="preserve">
    <value>WITServerDiff.VerifyContentMatch time to perform diff: {0} seconds</value>
  </data>
  <data name="SessionIsNotVCSession" xml:space="preserve">
    <value>The session specified is not a version control session: {0}</value>
  </data>
  <data name="SessionIsNotWITSession" xml:space="preserve">
    <value>The session specified is not a work item session: {0}</value>
  </data>
  <data name="SessionWithIdAndTypeNotFound" xml:space="preserve">
    <value>No session of type {0} with Id {1} was found</value>
  </data>
  <data name="InvalidXMLDocumentForDiffItem" xml:space="preserve">
    <value>Invalid XML document returned in by the adapter for '{0}' in its IDiffItem implementation</value>
  </data>
  <data name="WorkItemDataMismatch" xml:space="preserve">
    <value>The contents of work item with Id '{0}' in '{1}' does not match the work item '{2}' in '{3}'</value>
  </data>
  <data name="WorkItemDefinitionMismatch" xml:space="preserve">
    <value>The definition of work item with Id '{0}' in '{1}' does not match the work item '{2}' in '{3}'</value>
  </data>
  <data name="WorkItemFieldCountsDoNotMatch" xml:space="preserve">
    <value>The number of fields in the work item definitions do not match: {0} for {1}; {2} for {3}</value>
  </data>
  <data name="WorkItemMissingField" xml:space="preserve">
    <value>The field '{0}' was defined for '{1}' but not for '{2}'</value>
  </data>
  <data name="WorkItemNotMirrored" xml:space="preserve">
    <value>No corresponding work item as found in '{0}' for the work item with Id in '{1}' in '{2}'</value>
  </data>
  <data name="WorkItemProcessingError" xml:space="preserve">
    <value>Error comparing work items: {0}</value>
  </data>
  <data name="ServerDiffProviderNotLoaded" xml:space="preserve">
    <value>There is no provider loaded for the migration source '{0}'</value>
  </data>
  <data name="AllContentsMatch" xml:space="preserve">
    <value>All contents match!</value>
  </data>
  <data name="ContentsDoNotMatch" xml:space="preserve">
    <value>The contents do not match.  The migration may have had errors.</value>
  </data>
  <data name="ExceptionRunningServerDiff" xml:space="preserve">
    <value>An exception occurred running ServerDiff: {0}</value>
  </data>
  <data name="ServerDiffResult" xml:space="preserve">
    <value>ServerDiff: RESULT: {0}</value>
  </data>
  <data name="ExceptionStoringResultsInDB" xml:space="preserve">
    <value>An Exception occurred trying to store ServerDiff results in the TFS_IntegrationPlatform Database: {0}</value>
  </data>
  <data name="NoActiveSessionsWithTypeFound" xml:space="preserve">
    <value>No active session of type {0} was found</value>
  </data>
  <data name="ServerDiffJobRunning" xml:space="preserve">
    <value>{0} woke up and is looking for active {1} sessions</value>
  </data>
  <data name="ServerDiffJobSleeping" xml:space="preserve">
    <value>{0} sleeping</value>
  </data>
</root>