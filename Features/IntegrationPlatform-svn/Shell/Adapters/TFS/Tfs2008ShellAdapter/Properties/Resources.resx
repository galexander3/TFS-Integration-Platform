<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExcessivePathConflictTypeDescription" xml:space="preserve">
    <value>This conflict is detected when an Area or Iteration Path exists on the server but should not.</value>
    <comment>WIT</comment>
  </data>
  <data name="ExcessivePathConflictTypeFriendlyName" xml:space="preserve">
    <value>Excessive Path Conflict Type</value>
    <comment>WIT</comment>
  </data>
  <data name="FileAttachmentOversizedConflictTypeDescription" xml:space="preserve">
    <value>This conflict is detected when the size of an attachment file exceeds the maximum allowed attachment size on the TFS server.</value>
    <comment>WIT</comment>
  </data>
  <data name="FileAttachmentOversizedConflictTypeFriendlyName" xml:space="preserve">
    <value>TFS WIT attachment file oversized</value>
    <comment>WIT</comment>
  </data>
  <data name="InsufficientPermissionConflictTypeDescription" xml:space="preserve">
    <value>This conflict is detected when the migration service account does not met the permission requirements.</value>
    <comment>WIT</comment>
  </data>
  <data name="InsufficientPermissionConflictTypeFriendlyName" xml:space="preserve">
    <value>TFS WIT insufficient permission conflict type</value>
    <comment>WIT</comment>
  </data>
  <data name="InvalidFieldConflictTypeDescription" xml:space="preserve">
    <value>This conflict is detected when a TFS Work Item contains invalid field.</value>
    <comment>WIT</comment>
  </data>
  <data name="InvalidFieldConflictTypeFriendlyName" xml:space="preserve">
    <value>TFS WIT invalid field conflict type</value>
    <comment>WIT</comment>
  </data>
  <data name="InvalidFieldValueConflictTypeDescription" xml:space="preserve">
    <value>This conflict is detected when a TFS Work Item contains invalid field value</value>
    <comment>WIT</comment>
  </data>
  <data name="InvalidFieldValueConflictTypeFriendlyName" xml:space="preserve">
    <value>TFS WIT invalid field value conflict type</value>
    <comment>WIT</comment>
  </data>
  <data name="InvalidSubmissionConflictTypeDescription" xml:space="preserve">
    <value>This conflict is detected when the change submitted to the TFS server is invalid.</value>
    <comment>WIT</comment>
  </data>
  <data name="InvalidSubmissionConflictTypeFriendlyName" xml:space="preserve">
    <value>TFS WIT invalid submission conflict type</value>
    <comment>WIT</comment>
  </data>
  <data name="WitGeneralConflictTypeDescription" xml:space="preserve">
    <value>This conflict is detected when an unknown exception is thrown during Work Item data submission.</value>
    <comment>WIT</comment>
  </data>
  <data name="WitGeneralConflictTypeFriendlyName" xml:space="preserve">
    <value>TFS WIT general conflict type</value>
    <comment>WIT</comment>
  </data>
  <data name="WorkItemHistoryNotFoundConflictTypeDescription" xml:space="preserve">
    <value>This conflict is detected when the history information of migrated work item is not found.</value>
    <comment>WIT</comment>
  </data>
  <data name="WorkItemHistoryNotFoundConflictTypeFriendlyName" xml:space="preserve">
    <value>TFS WIT history not found conflict type</value>
    <comment>WIT</comment>
  </data>
  <data name="WorkItemTypeNotExistConflictTypeDescription" xml:space="preserve">
    <value>This conflict is detected when the Work Item Type of a Work Item does not exist on the target TFS system.</value>
    <comment>WIT</comment>
  </data>
  <data name="WorkItemTypeNotExistConflictTypeFriendlyName" xml:space="preserve">
    <value>TFS Work Item Type not exist conflict type</value>
    <comment>WIT</comment>
  </data>
</root>