//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.TeamFoundation.Migration.Shell.TfsCommonShellAdapter.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.TeamFoundation.Migration.Shell.TfsCommonShellAdapter.Properties.Resourc" +
                            "es", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the configuration and retry the operation(Requires user to manually add the path or its parent path to the mapping)..
        /// </summary>
        internal static string AddPathToMappingAction {
            get {
                return ResourceManager.GetString("AddPathToMappingAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always drop oversized attachments..
        /// </summary>
        internal static string AlwaysDropAttachmentAction {
            get {
                return ResourceManager.GetString("AlwaysDropAttachmentAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto resolve this conflict..
        /// </summary>
        internal static string AutoResolveConflict {
            get {
                return ResourceManager.GetString("AutoResolveConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A branch from path can not be detected in the target system for the following item:.
        /// </summary>
        internal static string BranchParentNotFoundConflictDetails {
            get {
                return ResourceManager.GetString("BranchParentNotFoundConflictDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is due to a branch from path that can not be detected. Typical causes include lack of read permission to branch from path, or the branch from path has been destroyed. Choose a resolution action:.
        /// </summary>
        internal static string BranchParentNotFoundConflictTypeDescription {
            get {
                return ResourceManager.GetString("BranchParentNotFoundConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is detected when revisions are made to items that reside in the backlog.
        /// </summary>
        internal static string ChainOnBackloggedItemConflictTypeDescription {
            get {
                return ResourceManager.GetString("ChainOnBackloggedItemConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chain on backlogged item conflict type.
        /// </summary>
        internal static string ChainOnBackloggedItemConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("ChainOnBackloggedItemConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is block a list of change actions on a particular conflict.
        /// </summary>
        internal static string ChainOnConflictConflictTypeDescription {
            get {
                return ResourceManager.GetString("ChainOnConflictConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chain on conflict conflict type.
        /// </summary>
        internal static string ChainOnConflictConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("ChainOnConflictConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolve this conflict by changing to &apos;Add&apos; for &apos;Branch&apos;, by skipping for &apos;Merge&apos; and by changing to &apos;Add&apos; for &apos;Remove&apos;..
        /// </summary>
        internal static string ChangeToAddAction {
            get {
                return ResourceManager.GetString("ChangeToAddAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is detected when cyclic link references are created for a non-circular link type..
        /// </summary>
        internal static string CyclicLinkReferenceConflictTypeDescription {
            get {
                return ResourceManager.GetString("CyclicLinkReferenceConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cyclic link reference conflict type.
        /// </summary>
        internal static string CyclicLinkReferenceConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("CyclicLinkReferenceConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drop this attachment..
        /// </summary>
        internal static string DropAttachmentAction {
            get {
                return ResourceManager.GetString("DropAttachmentAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is due to a label that already exists in the target system..
        /// </summary>
        internal static string DuplicateLabelNameConflictTypeDescription {
            get {
                return ResourceManager.GetString("DuplicateLabelNameConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A label already exists in the target system..
        /// </summary>
        internal static string DuplicateLabelNameConflictTypeDetails {
            get {
                return ResourceManager.GetString("DuplicateLabelNameConflictTypeDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is due to a migration action that attempts to create a file property fails. Choose a resolution action:.
        /// </summary>
        internal static string FilePropertyCreationConflictTypeDescription {
            get {
                return ResourceManager.GetString("FilePropertyCreationConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A conflict has been detected when a migration action fails to create a file property..
        /// </summary>
        internal static string FilePropertyCreationConflictTypeDetails {
            get {
                return ResourceManager.GetString("FilePropertyCreationConflictTypeDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict type represents runtime errors detected by the framework..
        /// </summary>
        internal static string GenericConflictTypeDescription {
            get {
                return ResourceManager.GetString("GenericConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Runtime Error.
        /// </summary>
        internal static string GenericConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("GenericConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You may need to manually verify/modify {0} permissions for this conflict to be successfully resolved..
        /// </summary>
        internal static string InsufficientPermissionsConflictTypeDescription {
            get {
                return ResourceManager.GetString("InsufficientPermissionsConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The label name contains invalid characters..
        /// </summary>
        internal static string InvalidLabelNameConflictTypeDescription {
            get {
                return ResourceManager.GetString("InvalidLabelNameConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You may need to modify the TFS setting for filename formats for this conflict to be successfully resolved..
        /// </summary>
        internal static string InvalidShortFilenameFormatConflictTypeDescription {
            get {
                return ResourceManager.GetString("InvalidShortFilenameFormatConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following changegroup includes a file with an invalid 8.3 short filename format:.
        /// </summary>
        internal static string InvalidShortFilenameFormatConflictTypeDetails {
            get {
                return ResourceManager.GetString("InvalidShortFilenameFormatConflictTypeDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is due to a failure in label creation. Choose a resolution action:.
        /// </summary>
        internal static string LabelCreationConflictTypeDescription {
            get {
                return ResourceManager.GetString("LabelCreationConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is a fallback to use when we cannot determine a more specific cause for the label creation failure..
        /// </summary>
        internal static string LabelCreationConflictTypeDetails {
            get {
                return ResourceManager.GetString("LabelCreationConflictTypeDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Choose a resolution:.
        /// </summary>
        internal static string OversizedAttachmentConflictTypeDescription {
            get {
                return ResourceManager.GetString("OversizedAttachmentConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename the label to:.
        /// </summary>
        internal static string RenameLabelAction {
            get {
                return ResourceManager.GetString("RenameLabelAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolve the conflict for the following path(Changing to &apos;Add&apos; for &apos;Branch&apos;, skipping &apos;Merge&apos; and changing to &apos;Add&apos; for &apos;Rename&apos;)..
        /// </summary>
        internal static string ResolveBranchParentAction {
            get {
                return ResourceManager.GetString("ResolveBranchParentAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Retry the operation..
        /// </summary>
        internal static string RetryAction {
            get {
                return ResourceManager.GetString("RetryAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Retry the operation(Requires manual changes to TFS settings)..
        /// </summary>
        internal static string RetryManualAction {
            get {
                return ResourceManager.GetString("RetryManualAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Retry the operation(The missing item may have to be added by the user manually)..
        /// </summary>
        internal static string RetryManualAddAction {
            get {
                return ResourceManager.GetString("RetryManualAddAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolve this conflict by skipping the action..
        /// </summary>
        internal static string SkipAction {
            get {
                return ResourceManager.GetString("SkipAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skip the errors and make the checkin..
        /// </summary>
        internal static string SkipErrors {
            get {
                return ResourceManager.GetString("SkipErrors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skip the history query and checkin as &apos;Add&apos;..
        /// </summary>
        internal static string SkipHistoryAction {
            get {
                return ResourceManager.GetString("SkipHistoryAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skip the migration for this item..
        /// </summary>
        internal static string SkipMigrationAction {
            get {
                return ResourceManager.GetString("SkipMigrationAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suppress the history with the following changeset ID:.
        /// </summary>
        internal static string SuppressHistoryAction {
            get {
                return ResourceManager.GetString("SuppressHistoryAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always take the source system&apos;s changes..
        /// </summary>
        internal static string TakeLocalChangesAction {
            get {
                return ResourceManager.GetString("TakeLocalChangesAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always take the target system&apos;s changes..
        /// </summary>
        internal static string TakeOtherChangesAction {
            get {
                return ResourceManager.GetString("TakeOtherChangesAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always take the {0} source&apos;s changes for all conflicts arising from the source path selected below:.
        /// </summary>
        internal static string TakeSourceChangesAction {
            get {
                return ResourceManager.GetString("TakeSourceChangesAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always take the {0} source&apos;s changes for all conflicts arising from the source path selected below. If you only want this rule to apply to this specific conflict, then choose {1}..
        /// </summary>
        internal static string TakeSourceChangesActionWithChangeset {
            get {
                return ResourceManager.GetString("TakeSourceChangesActionWithChangeset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is due to a code review failure before the checkin of a change group..
        /// </summary>
        internal static string TfsCheckinConflictTypeDescription {
            get {
                return ResourceManager.GetString("TfsCheckinConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A code review failed before the checkin of the following change group:.
        /// </summary>
        internal static string TfsCheckinConflictTypeDetails {
            get {
                return ResourceManager.GetString("TfsCheckinConflictTypeDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TFS checkin conflict.
        /// </summary>
        internal static string TfsCheckinConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("TfsCheckinConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is detected when a path is in the DOS (8.3) short path format..
        /// </summary>
        internal static string TFSDosShortNameConflictTypeDescription {
            get {
                return ResourceManager.GetString("TFSDosShortNameConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOS (8.3) short path format conflict.
        /// </summary>
        internal static string TFSDosShortNameConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("TFSDosShortNameConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is detected when the history information of a migrated changeset is not found..
        /// </summary>
        internal static string TfsHistoryNotFoundConflictTypeDescription {
            get {
                return ResourceManager.GetString("TfsHistoryNotFoundConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no history information found for the following migrated changeset:.
        /// </summary>
        internal static string TfsHistoryNotFoundConflictTypeDetails {
            get {
                return ResourceManager.GetString("TfsHistoryNotFoundConflictTypeDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TFS history not found conflict.
        /// </summary>
        internal static string TFSHistoryNotFoundConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("TFSHistoryNotFoundConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following item can not be found in the target system:.
        /// </summary>
        internal static string TfsItemNotFoundConflictDetails {
            get {
                return ResourceManager.GetString("TfsItemNotFoundConflictDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is due to an item that is not found in the target system(This conflict may be the result of a destroy operation or lack of read permissions). Choose a resolution action:.
        /// </summary>
        internal static string TfsItemNotFoundConflictTypeDescription {
            get {
                return ResourceManager.GetString("TfsItemNotFoundConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TFS item not found conflict.
        /// </summary>
        internal static string TfsItemNotFoundConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("TfsItemNotFoundConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unchanged Content.
        /// </summary>
        internal static string TFSZeroCheckinConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("TFSZeroCheckinConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following change group contains no changes:.
        /// </summary>
        internal static string UnchangedConflictDetails {
            get {
                return ResourceManager.GetString("UnchangedConflictDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is detected when the content for the changeset includes no changes..
        /// </summary>
        internal static string UnChangedContentConflictTypeDescription {
            get {
                return ResourceManager.GetString("UnChangedContentConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the following merged changesets for the source and the target system(Requires a manual merge)..
        /// </summary>
        internal static string UserMergeChangesAction {
            get {
                return ResourceManager.GetString("UserMergeChangesAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is detected when the branch from path can not be detected. Typical causes include lack of read permission to branch from path, or the branch from path has been destroyed..
        /// </summary>
        internal static string VCBranchParentNotFoundConflictTypeDescription {
            get {
                return ResourceManager.GetString("VCBranchParentNotFoundConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VC branch parent not found conflict type.
        /// </summary>
        internal static string VCBranchParentNotFoundConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("VCBranchParentNotFoundConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict type is detected when there are other in-progress change groups in the migration pipeline..
        /// </summary>
        internal static string VCChangeGroupInProgressConflictTypeDescription {
            get {
                return ResourceManager.GetString("VCChangeGroupInProgressConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change group in progress.
        /// </summary>
        internal static string VCChangeGroupInProgressConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("VCChangeGroupInProgressConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A content conflict has been detected between the source and the target system for the following item:.
        /// </summary>
        internal static string VCContentConflictDetails {
            get {
                return ResourceManager.GetString("VCContentConflictDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is due to revisions that are made to mapped files on both the source and the target system. Choose a resolution action:.
        /// </summary>
        internal static string VCContentConflictTypeDescription {
            get {
                return ResourceManager.GetString("VCContentConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VC content conflict type.
        /// </summary>
        internal static string VCContentConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("VCContentConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is detected when a migration action that attempts to create a file property fails..
        /// </summary>
        internal static string VCFilePropertyCreationConflictTypeDescription {
            get {
                return ResourceManager.GetString("VCFilePropertyCreationConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File property creation conflict type.
        /// </summary>
        internal static string VCFilePropertyCreationConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("VCFilePropertyCreationConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is detected when the action to be migrated has a invalid label name..
        /// </summary>
        internal static string VCInvalidLabelNameConflictTypeDescription {
            get {
                return ResourceManager.GetString("VCInvalidLabelNameConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid label name conflict type.
        /// </summary>
        internal static string VCInvalidLabelNameConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("VCInvalidLabelNameConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is detected when the action to be migrated has an invalid TFS path..
        /// </summary>
        internal static string VCInvalidPathConflictTypeDescription {
            get {
                return ResourceManager.GetString("VCInvalidPathConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following invalid TFS path is detected for the migration action:.
        /// </summary>
        internal static string VCInvalidPathConflictTypeDetails {
            get {
                return ResourceManager.GetString("VCInvalidPathConflictTypeDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TFS invalid path conflict.
        /// </summary>
        internal static string VCInvalidPathConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("VCInvalidPathConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is detected when the action to be migrated is adding a label with a name that already exists..
        /// </summary>
        internal static string VCLabelAlreadyExistsConflictTypeDescription {
            get {
                return ResourceManager.GetString("VCLabelAlreadyExistsConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Label already exists conflict type.
        /// </summary>
        internal static string VCLabelAlreadyExistsConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("VCLabelAlreadyExistsConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is detected when a migration action that attempts to create a label fails..
        /// </summary>
        internal static string VCLabelCreationConflictTypeDescription {
            get {
                return ResourceManager.GetString("VCLabelCreationConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Label creation conflict type.
        /// </summary>
        internal static string VCLabelCreationConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("VCLabelCreationConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following item could not be found in the target system:.
        /// </summary>
        internal static string VCMissingItemConflictDetails {
            get {
                return ResourceManager.GetString("VCMissingItemConflictDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is detected when an item to be migrated does not exist on the target server..
        /// </summary>
        internal static string VCMissingItemConflictTypeDescription {
            get {
                return ResourceManager.GetString("VCMissingItemConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VC missing item conflict.
        /// </summary>
        internal static string VCMissingItemConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("VCMissingItemConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A namespace conflict has been detected between the source and the target system for the following item:.
        /// </summary>
        internal static string VCNameSpaceConflictDetails {
            get {
                return ResourceManager.GetString("VCNameSpaceConflictDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is due to revisions that are made to mapped files on both the source and the target system. Choose a resolution action:.
        /// </summary>
        internal static string VCNameSpaceConflictTypeDescription {
            get {
                return ResourceManager.GetString("VCNameSpaceConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VC Namespace conflict type.
        /// </summary>
        internal static string VCNameSpaceConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("VCNameSpaceConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following path is not mapped in the target system:.
        /// </summary>
        internal static string VCPathNotMappedConflictDetails {
            get {
                return ResourceManager.GetString("VCPathNotMappedConflictDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is due to a path that is migrated is not mapped in the target system. Choose a resolution action:.
        /// </summary>
        internal static string VCPathNotMappedConflictTypeDescription {
            get {
                return ResourceManager.GetString("VCPathNotMappedConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VC path not mapped conflict type.
        /// </summary>
        internal static string VCPathNotMappedConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("VCPathNotMappedConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A conflict type that requires user&apos;s intervention..
        /// </summary>
        internal static string VCUserPromptConflictTypeDescription {
            get {
                return ResourceManager.GetString("VCUserPromptConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User Prompt.
        /// </summary>
        internal static string VCUserPromptConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("VCUserPromptConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always resolve field collisions by keeping changes of {0}..
        /// </summary>
        internal static string WitAlwaysKeepChangesAction {
            get {
                return ResourceManager.GetString("WitAlwaysKeepChangesAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always resolve field collisions by taking changes from {0}..
        /// </summary>
        internal static string WitAlwaysTakeChangesAction {
            get {
                return ResourceManager.GetString("WitAlwaysTakeChangesAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always resolve field collisions by taking changes from the source item..
        /// </summary>
        internal static string WITEditEditAlwaysTakeSourceAction {
            get {
                return ResourceManager.GetString("WITEditEditAlwaysTakeSourceAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always resolve field collisions by keeping changes of the target item..
        /// </summary>
        internal static string WITEditEditAlwaysTakeTargetAction {
            get {
                return ResourceManager.GetString("WITEditEditAlwaysTakeTargetAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is detected when revisions are made to mapped work items on both the source and target system..
        /// </summary>
        internal static string WITEditEditConflictTypeDescription {
            get {
                return ResourceManager.GetString("WITEditEditConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WIT edit/edit conflict type.
        /// </summary>
        internal static string WITEditEditConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("WITEditEditConflictTypeFriendlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Take the changes from the source item (applies to this item only)..
        /// </summary>
        internal static string WITEditEditTakeSourceAction {
            get {
                return ResourceManager.GetString("WITEditEditTakeSourceAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keep the changes from the target item (applies to this item only)..
        /// </summary>
        internal static string WITEditEditTakeTargetAction {
            get {
                return ResourceManager.GetString("WITEditEditTakeTargetAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is the result of fields that have changed in both the source and target systems.
        /// </summary>
        internal static string WITFieldCollisionConflictTypeDescription {
            get {
                return ResourceManager.GetString("WITFieldCollisionConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keep the changes from {0} (applies to this item only)..
        /// </summary>
        internal static string WitKeepChangesAction {
            get {
                return ResourceManager.GetString("WitKeepChangesAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Take the changes from {0} (applies to this item only)..
        /// </summary>
        internal static string WitTakeChangesAction {
            get {
                return ResourceManager.GetString("WitTakeChangesAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This conflict is detected when a source Work Item Type is not mapped in the configuration..
        /// </summary>
        internal static string WITUnmappedWITConflictTypeDescription {
            get {
                return ResourceManager.GetString("WITUnmappedWITConflictTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WIT unmapped Work Item Type conflict type.
        /// </summary>
        internal static string WITUnmappedWITConflictTypeFriendlyName {
            get {
                return ResourceManager.GetString("WITUnmappedWITConflictTypeFriendlyName", resourceCulture);
            }
        }
    }
}
