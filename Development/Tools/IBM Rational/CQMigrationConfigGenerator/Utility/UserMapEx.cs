// Copyright © Microsoft Corporation.  All Rights Reserved.
// This code released under the terms of the 
// Microsoft Public License (MS-PL, http://opensource.org/licenses/ms-pl.html.)

// This file is complementary to the file UserMap.cs.
// UserMap.cs contains the autogenerated code. 
// Where as this file contains the part of the code that remains constant irrespective of the changes in UserMap.cs

#region Using directives

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

#endregion

// Following comments are related to UserMap.cs generated using xsd.exe
//      Modifications done after generating the file UserMap.cs from xsd.exe. 
//      1. Added namespace to the auto generated file.
//      2. Made the classs UserMappings and UserMappingsUserMap ‘public partial’ from ‘public’

// These classes are public partial because they need to be serialized and the definition is in multiple files.

namespace Microsoft.TeamFoundation.Converters.Utility
{
    /// <summary>
    /// This class contains the additional methods and details for serializing/deserializing the user.xml file.
    /// </summary>
    public partial class UserMappings
    {
        #region Constructors
        public UserMappings()
        {
            //Debug.Assert(false, "This constructor shouldnt have been called");
            //Never use this constructor. Present only to satisfy the serializable condition that a default constr should be present.
        }
        public UserMappings(string fileName)
        {
            Debug.Assert(fileName != null, "Arg cannot be  null");   // This should eliminate ArgumentNullException.
            Debug.Assert(fileName.Length != 0, "Arg cannot be empty"); // This should eliminate ArgumentException.
            m_fileName = fileName;
            m_userList = new List<UserMappingsUserMap>();
        }
        #endregion

        #region Public Methodss
        // Add an object of the type UserMappingsUserMap with both the fields provided.
        public void Add(string fromName, string toName)
        {
            m_userList.Add(new UserMappingsUserMap(fromName, toName));
        }

        // This method is called at the end when the user.xml file needs to be generated.
        // This file will serialize this object into a file.
        public void Flush()
        {
            try
            {
                string pathRoot = Path.GetDirectoryName(m_fileName);
                if (!string.IsNullOrEmpty(pathRoot))
                {
                    Directory.CreateDirectory(pathRoot);
                }

                using (TextWriter writer = new StreamWriter(m_fileName))
                {
                    userMapField = m_userList.ToArray();
                    XmlSerializer x = new XmlSerializer(typeof(UserMappings));
                    x.Serialize(writer, this);
                }
            }
            //Unable to write to file {0}. Error {1}
            catch (Exception e) // catch all
            {
                UtilityMethods.DisplayError(UtilityMethods.Format(
                    CommonResource.FileWriteError, m_fileName, e.Message));
                Logger.WriteException(LogSource.Common, e);
            }
        }
        #endregion


        #region Public Static Methods
        /// <summary>
        /// This method will validate the given xml file against usermap.xsd and deserialize the file if its in proper format.
        /// This method returns an object of the type UserMappings containing the list of UserMappingsUserMap objects.
        /// </summary>
        /// <param name="xmlFileName"></param>
        /// <param name="xsdFileName"></param>
        /// <returns></returns>
        public static UserMappings ValidateAndRead(string xmlFileName, string xsdFileName)
        {
            UtilityMethods.ValidateXmlFile(xmlFileName, xsdFileName);
            using (TextReader reader = new StreamReader(xmlFileName))
            {
                UserMappings usermap = new UserMappings(xmlFileName);
                XmlSerializer serializer = new XmlSerializer(typeof(UserMappings));
                // No exceptions are thrown from this method. Thats what msdn says.
                usermap = (UserMappings)serializer.Deserialize(reader);
                usermap.m_fileName = xmlFileName;
                return usermap;
            }
        }

        #endregion

        #region Private Variables
        private string m_fileName;
        private List<UserMappingsUserMap> m_userList;
        #endregion
    }

    /// <summary>
    /// This class defines the content of the UserMap class.
    /// </summary>
    public partial class UserMappingsUserMap
    {
        #region Constructor
        public UserMappingsUserMap()
        {
        }

        public UserMappingsUserMap(string fromUser, string toUser)
        {
            fromField = fromUser;
            toField = toUser;
        }
        #endregion
    }
}
