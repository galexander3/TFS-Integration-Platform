// Copyright © Microsoft Corporation.  All Rights Reserved.
// This code released under the terms of the 
// Microsoft Public License (MS-PL, http://opensource.org/licenses/ms-pl.html.)

// File with the custom exceptions for the converters.

using System;
using System.Xml.Serialization;


namespace Microsoft.TeamFoundation.Converters.Utility
{
    /// <summary>
    /// This is the class which represents the exceptions generated by the converter on error conditions.
    /// </summary>
    [System.Serializable]
    public class ConverterException : Exception
    {
        // When an exception class is defined, atleast these 4 methods should be present according to FxCop.

        // Default exception.
        public ConverterException()
        {
        }

        // Constructor with just the error message
        public ConverterException(string msg)
            : base(msg)
        {
        }

        // With error message and innerexception
        public ConverterException(string msg, Exception innerException)
            : base(msg, innerException)
        {
        }

        // For serialization this constructor is necessary.
        protected ConverterException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        {
        }
    }

    /// <summary>
    /// This is the class which represents the exceptions generated by the converter when the converter is
    /// aborting.
    /// </summary>
    [System.Serializable]
    public class ConverterAbortingException : ConverterException
    {
        // When an exception class is defined, atleast these 4 methods should be present according to FxCop.

        // Default exception.
        public ConverterAbortingException()
        {
        }

        // Constructor with just the error message
        public ConverterAbortingException(string msg)
            : base(msg)
        {
        }

        // With error message and innerexception
        public ConverterAbortingException(string msg, Exception innerException)
            : base(msg, innerException)
        {
        }

        // For serialization this constructor is necessary.
        protected ConverterAbortingException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        {
        }
    }
}
